// Code generated by MockGen. DO NOT EDIT.
// Source: indexesCollection.go

// Package indexer is a generated GoMock package.
package indexer

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	config "github.com/sp0x/torrentd/config"
	categories "github.com/sp0x/torrentd/indexer/categories"
)

// MockScope is a mock of Scope interface.
type MockScope struct {
	ctrl     *gomock.Controller
	recorder *MockScopeMockRecorder
}

// MockScopeMockRecorder is the mock recorder for MockScope.
type MockScopeMockRecorder struct {
	mock *MockScope
}

// NewMockScope creates a new mock instance.
func NewMockScope(ctrl *gomock.Controller) *MockScope {
	mock := &MockScope{ctrl: ctrl}
	mock.recorder = &MockScopeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScope) EXPECT() *MockScopeMockRecorder {
	return m.recorder
}

// Indexes mocks base method.
func (m *MockScope) Indexes() map[string]IndexCollection {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Indexes")
	ret0, _ := ret[0].(map[string]IndexCollection)
	return ret0
}

// Indexes indicates an expected call of Indexes.
func (mr *MockScopeMockRecorder) Indexes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Indexes", reflect.TypeOf((*MockScope)(nil).Indexes))
}

// Lookup mocks base method.
func (m *MockScope) Lookup(config config.Config, key string) (IndexCollection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lookup", config, key)
	ret0, _ := ret[0].(IndexCollection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Lookup indicates an expected call of Lookup.
func (mr *MockScopeMockRecorder) Lookup(config, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lookup", reflect.TypeOf((*MockScope)(nil).Lookup), config, key)
}

// LookupAll mocks base method.
func (m *MockScope) LookupAll(config config.Config, selector *Selector) (IndexCollection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupAll", config, selector)
	ret0, _ := ret[0].(IndexCollection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupAll indicates an expected call of LookupAll.
func (mr *MockScopeMockRecorder) LookupAll(config, selector interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupAll", reflect.TypeOf((*MockScope)(nil).LookupAll), config, selector)
}

// NewAggregateIndexesWithCategories mocks base method.
func (m *MockScope) LookupWithCategories(config config.Config, selector *Selector, cats []categories.Category) (IndexCollection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupWithCategories", config, selector, cats)
	ret0, _ := ret[0].(IndexCollection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewAggregateIndexesWithCategories indicates an expected call of NewAggregateIndexesWithCategories.
func (mr *MockScopeMockRecorder) NewAggregateIndexesWithCategories(config, selector, cats interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupWithCategories", reflect.TypeOf((*MockScope)(nil).LookupWithCategories), config, selector, cats)
}
